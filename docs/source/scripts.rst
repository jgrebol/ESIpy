Python scripts
=================

ESIpy can work on the command line using in-built Python scripts. The scripts are located in the
``scripts`` directory. This way, it is not required to build an input file. They work with the already generated
AOMs, either those that come from QTAIM partitioning (`int2esi`) or those that come from ESIpy's AOMs (`aom2esi`).

AOM2ESI
----------------

The general format of the command is:

.. code-block:: bash

    aom2esi <path>/<name> [options]

where <path> is the path to the .aom and .molinfo files and <name> is the name of the files without extension.
That is, for bz_iao.aoms files the input would take the form ``aom2esi bz_iao``. The options for the script are:

* ``-r`` or ``--rings``: Specify the rings. For more than one ring, separate using a comma (e.g., "-r 1 2 3 4 5 6, 7 8 9 10 11 12").
* ``-mci``: Whether to compute the MCI. See `AV1245 and MCI calculation <advanced.html#av1245-and-mci-calculation>`_ for more information.
* ``-av1245``: Whether to compute the AV1245. See `AV1245 and MCI calculation <advanced.html#av1245-and-mci-calculation>`_ for more information.
* ``-n`` or ``--ncores``: Number of cores for the MCI. By default, 1.
* ``-v`` or ``--verbose``: Verbose.
* ``-h`` or ``--help``: Show the help message and exit.

.. note::

    The AOMs are generated by using the ``save`` argument in ESIpy. The program will include the atomic partition to the name (e.g.,
    setting ``save="bz"`` will generate `bz_iao.aoms` and `bz_iao.molinfo` files). The AOMs are saved in the current working directory.

An example input to read the AOMs from `bz_iao.aoms` would be:

.. code-block:: bash

    aom2esi bz_iao -r 1 2 3 4 5 6

and for a molecule with multiple rings, for example naphthalene:

.. code-block:: bash

    aom2esi naphthalene_meta_lowdin -r 1 2 3 4 5 6, 7 8 9 10 11 12, 1 2 3 4 5 7 8 9 10 6


INT2ESI
----------------

Similarly, one can read the AOMs from the .int files from an AIMAll or ESIpy calculation. The general format of the command is:

.. code-block:: bash

    int2esi <path> [options]

where <path> is the path of the "_atomicfiles/" directory. The options for the script are:

* ``-r`` or ``--rings``: Specify the rings. For more than one ring, separate using a comma (e.g., "-r 1 2 3 4 5 6, 7 8 9 10 11 12").
* ``-mci``: Whether to compute the MCI. See `AV1245 and MCI calculation <advanced.html#av1245-and-mci-calculation>`_ for more information.
* ``-av1245``: Whether to compute the AV1245. See `AV1245 and MCI calculation <advanced.html#av1245-and-mci-calculation>`_ for more information.
* ``-n`` or ``--ncores``: Number of cores for the MCI. By default, 1.
* ``-s`` or ``--save``: Whether to save the AOMs and molinfo as ESIpy's objects.
* ``-v`` or ``--verbose``: Verbose.
* ``-h`` or ``--help``: Show the help message and exit.

An example input to read the AOMs from `bz_iao_atomicfiles/` would be:

.. code-block:: bash

    int2esi bz_iao_atomicfiles -r 1 2 3 4 5 6
